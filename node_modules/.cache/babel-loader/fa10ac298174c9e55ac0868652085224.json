{"remainingRequest":"D:\\capstone\\DrowsinessFrontEnd\\node_modules\\thread-loader\\dist\\cjs.js!D:\\capstone\\DrowsinessFrontEnd\\node_modules\\babel-loader\\lib\\index.js!D:\\capstone\\DrowsinessFrontEnd\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\capstone\\DrowsinessFrontEnd\\src\\store\\modules\\user.js","dependencies":[{"path":"D:\\capstone\\DrowsinessFrontEnd\\src\\store\\modules\\user.js","mtime":1625391958574},{"path":"D:\\capstone\\DrowsinessFrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\capstone\\DrowsinessFrontEnd\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\capstone\\DrowsinessFrontEnd\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\capstone\\DrowsinessFrontEnd\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/capstone/DrowsinessFrontEnd/src/store/modules/user.js"],"names":["myState","user","data","isLoading","success","error","myGetters","mutationTypes","GET_USER_REQUEST","GET_USER_SUCCESS","GET_USER_FAILURE","UPDATE_USER_REQUEST","UPDATE_USER_SUCCESS","UPDATE_USER_FAILURE","CLEAR_USER_DATA","mutations","state","actions","login","params","commit","res","window","axios","post","status","clearUserData","getUser","userId","$cookies","get","role","Error","updateUser","newUser","put","namespaced","getters"],"mappings":"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","sourcesContent":["const myState = () => ({\n  user: {\n    data: null,\n    isLoading: false,\n    success: null,\n    error: null,\n  },\n  // contracts: {\n  //   data: [],\n  //   isLoading: false,\n  //   success: null,\n  //   error: null,\n  // },\n  // bookings: {\n  //   data: [],\n  //   isLoading: false,\n  //   success: null,\n  //   error: null,\n  //   newlyCreated: null,\n  // },\n  // deals: {\n  //   data: [],\n  //   isLoading: false,\n  //   success: null,\n  //   error: null,\n  //   newlyCreated: null,\n  // },\n});\n\nconst myGetters = {\n  // get lasted deal\n  // findLastedDeal: (state) => (renterId, vendorId, typeId) => {\n  //   let result = state.deals.data.filter((deal) => {\n  //     if (deal.renter.renterId === renterId &&\n  //       deal.vendor.vendorId === vendorId &&\n  //       deal.type.typeId === typeId &&\n  //       deal.status === 'CREATED') {\n  //       return true;\n  //     }\n  //     return false;\n  //   });\n  //   result = result.sort((deal1, deal2) => deal1.creationTime - deal2.creationTime);\n  //   console.log(`lasted deal: ${result[0]}`);\n  //   return result[0];\n  // },\n  // findPendingBooking: (state) => (renterId, vendorId, typeId) => {\n  //   const result = state.bookings.data.filter((booking) => {\n  //     if (booking.renter.renterId === renterId &&\n  //       booking.vendor.vendorId === vendorId &&\n  //       booking.type.typeId === typeId &&\n  //       booking.status === 'INCOMING') {\n  //       return true;\n  //     }\n  //     return false;\n  //   });\n  //   console.log(`pending booking ${result[0]}`);\n  //   return result[0];\n  // },\n};\nconst mutationTypes = {\n  GET_USER_REQUEST: 'GET_USER_REQUEST',\n  GET_USER_SUCCESS: 'GET_USER_SUCCESS',\n  GET_USER_FAILURE: 'GET_USER_FAILURE',\n  UPDATE_USER_REQUEST: 'UPDATE_USER_REQUEST',\n  UPDATE_USER_SUCCESS: 'UPDATE_USER_SUCCESS',\n  UPDATE_USER_FAILURE: 'UPDATE_USER_FAILURE',\n  CLEAR_USER_DATA: 'CLEAR_USER_DATA',\n  // GET_CONTRACTS_REQUEST: 'GET_CONTRACTS_REQUEST',\n  // GET_CONTRACTS_SUCCESS: 'GET_CONTRACTS_SUCCESS',\n  // GET_CONTRACTS_FAILURE: 'GET_CONTRACTS_FAILURE',\n  // GET_BOOKINGS_REQUEST: 'GET_BOOKINGS_REQUEST',\n  // GET_BOOKINGS_SUCCESS: 'GET_BOOKINGS_SUCCESS',\n  // GET_BOOKINGS_FAILURE: 'GET_BOOKINGS_FAILURE',\n  // GET_BOOKING_REQUEST: 'GET_BOOKING_REQUEST',\n  // GET_BOOKING_SUCCESS: 'GET_BOOKING_SUCCESS',\n  // GET_BOOKING_FAILURE: 'GET_BOOKING_FAILURE',\n  // CREATE_BOOKING_REQUEST: 'CREATE_BOOKING_REQUEST',\n  // CREATE_BOOKING_SUCCESS: 'CREATE_BOOKING_SUCCESS',\n  // CREATE_BOOKING_FAILURE: 'CREATE_BOOKING_FAILURE',\n  // GET_DEALS_REQUEST: 'GET_DEALS_REQUEST',\n  // GET_DEALS_SUCCESS: 'GET_DEALS_SUCCESS',\n  // GET_DEALS_FAILURE: 'GET_DEALS_FAILURE',\n  // CREATE_DEAL_REQUEST: 'CREATE_DEAL_REQUEST',\n  // CREATE_DEAL_SUCCESS: 'CREATE_DEAL_SUCCESS',\n  // CREATE_DEAL_FAILURE: 'CREATE_DEAL_FAILURE',\n  // GET_DEAL_REQUEST: 'GET_DEAL_REQUEST',\n  // GET_DEAL_SUCCESS: 'GET_DEAL_SUCCESS',\n  // GET_DEAL_FAILURE: 'GET_DEAL_FAILURE',\n  // CANCEL_DEAL_REQUEST: 'CANCEL_DEAL_REQUEST',\n  // CANCEL_DEAL_SUCCESS: 'CANCEL_DEAL_SUCCESS',\n  // CANCEL_DEAL_FAILURE: 'CANCEL_DEAL_FAILURE',\n  // CANCEL_BOOKING_REQUEST: 'CANCEL_BOOKING_REQUEST',\n  // CANCEL_BOOKING_SUCCESS: 'CANCEL_BOOKING_SUCCESS',\n  // CANCEL_BOOKING_FAILURE: 'CANCEL_BOOKING_FAILURE',\n  // DONE_BOOKING_REQUEST: 'DONE_BOOKING_REQUEST',\n  // DONE_BOOKING_SUCCESS: 'DONE_BOOKING_SUCCESS',\n  // DONE_BOOKING_FAILURE: 'DONE_BOOKING_FAILURE',\n};\nconst mutations = {\n  CLEAR_USER_DATA(state) {\n    state.user.data = null;\n    state.user.isLoading = false;\n    state.user.success = false;\n  },\n  GET_USER_REQUEST(state) {\n    state.user.isLoading = true;\n  },\n  GET_USER_SUCCESS(state, user) {\n    state.user.data = user;\n    state.user.isLoading = false;\n    state.user.success = true;\n  },\n  GET_USER_FAILURE(state, error) {\n    state.user.isLoading = false;\n    state.user.success = false;\n    state.user.error = error;\n  },\n  // GET_CONTRACTS_REQUEST(state) {\n  //   state.contracts.isLoading = true;\n  // },\n  // GET_CONTRACTS_SUCCESS(state, contracts) {\n  //   state.contracts.data = contracts;\n  //   state.contracts.isLoading = false;\n  //   state.contracts.success = true;\n  // },\n  // GET_CONTRACTS_FAILURE(state, error) {\n  //   state.contracts.isLoading = false;\n  //   state.contracts.success = false;\n  //   state.contracts.error = error;\n  // },\n  // GET_BOOKINGS_REQUEST(state) {\n  //   state.bookings.isLoading = true;\n  // },\n  // GET_BOOKINGS_SUCCESS(state, booking) {\n  //   state.bookings.data = booking;\n  //   state.bookings.isLoading = false;\n  //   state.bookings.success = true;\n  // },\n  // GET_BOOKINGS_FAILURE(state, error) {\n  //   state.bookings.isLoading = false;\n  //   state.bookings.success = false;\n  //   state.bookings.error = error;\n  // },\n  // GET_BOOKING_REQUEST(state) {\n  //   state.bookings.isLoading = true;\n  // },\n  // GET_BOOKING_SUCCESS(state, booking) {\n  //   state.bookings.data.unshift(booking);\n  //   state.bookings.isLoading = false;\n  //   state.bookings.success = true;\n  // },\n  // GET_BOOKING_FAILURE(state, error) {\n  //   state.bookings.isLoading = false;\n  //   state.bookings.success = false;\n  //   state.bookings.error = error;\n  // },\n  // CREATE_BOOKING_REQUEST(state) {\n  //   state.bookings.isLoading = true;\n  // },\n  // CREATE_BOOKING_SUCCESS(state, booking) {\n  //   state.bookings.data.push(booking);\n  //   state.bookings.newlyCreated = booking;\n  //   state.bookings.isLoading = false;\n  //   state.bookings.success = true;\n  // },\n  // CREATE_BOOKING_FAILURE(state, error) {\n  //   state.bookings.isLoading = false;\n  //   state.bookings.success = false;\n  //   state.bookings.error = error;\n  // },\n  // GET_DEALS_REQUEST(state) {\n  //   state.deals.isLoading = false;\n  // },\n  // GET_DEALS_SUCCESS(state, deals) {\n  //   state.deals.data = deals;\n  //   state.deals.isLoading = false;\n  //   state.deals.success = true;\n  // },\n  // GET_DEALS_FAILURE(state, error) {\n  //   state.deals.isLoading = false;\n  //   state.deals.success = false;\n  //   state.deals.error = error;\n  // },\n  // CREATE_DEAL_REQUEST(state) {\n  //   state.deals.isLoading = false;\n  // },\n  // CREATE_DEAL_SUCCESS(state, deal) {\n  //   state.deals.data.push(deal);\n  //   state.deals.newlyCreated = deal;\n  //   state.deals.success = true;\n  //   state.deals.isLoading = false;\n  // },\n  // CREATE_DEAL_FAILURE(state, error) {\n  //   state.deals.success = false;\n  //   state.deals.error = error;\n  // },\n  // GET_DEAL_REQUEST(state) {\n  //   state.deals.isLoading = false;\n  // },\n  // GET_DEAL_SUCCESS(state, deal) {\n  //   state.deals.data.push(deal);\n  //   state.deals.newlyCreated = deal;\n  //   state.deals.success = true;\n  //   state.deals.isLoading = false;\n  // },\n  // GET_DEAL_FAILURE(state, error) {\n  //   state.deals.success = false;\n  //   state.deals.error = error;\n  // },\n  // CANCEL_DEAL_REQUEST(state) {\n  //   state.deals.isLoading = true;\n  // },\n  // CANCEL_DEAL_SUCCESS(state, dealId) {\n  //   state.deals.isLoading = false;\n  //   state.deals.success = true;\n  //   const res = state.deals.data.filter((deal) => deal.dealId === dealId);\n  //   res[0].status = 'CANCEL';\n  // },\n  // CANCEL_DEAL_FAILURE(state, error) {\n  //   state.deals.isLoading = false;\n  //   state.deals.error = error;\n  // },\n  // CANCEL_BOOKING_REQUEST(state) {\n  //   state.bookings.isLoading = true;\n  // },\n  // CANCEL_BOOKING_SUCCESS(state, bookingId) {\n  //   state.bookings.isLoading = false;\n  //   state.bookings.success = true;\n  //   const res = state.bookings.data.filter((book) => book.bookingId === bookingId);\n  //   res[0].status = 'CANCEL';\n  // },\n  // CANCEL_BOOKING_FAILURE(state, error) {\n  //   state.bookings.isLoading = false;\n  //   state.bookings.error = error;\n  // },\n  // DONE_BOOKING_REQUEST(state) {\n  //   state.bookings.isLoading = true;\n  // },\n  // DONE_BOOKING_SUCCESS(state, bookingId) {\n  //   state.bookings.isLoading = false;\n  //   state.bookings.success = true;\n  //   const res = state.bookings.data.filter((book) => book.bookingId === bookingId);\n  //   res[0].status = 'DONE';\n  // },\n  // DONE_BOOKING_FAILURE(state, error) {\n  //   state.bookings.isLoading = false;\n  //   state.bookings.error = error;\n  // },\n  UPDATE_USER_REQUEST(state) {\n    state.user.isLoading = true;\n  },\n  UPDATE_USER_SUCCESS(state, user) {\n    state.user.data = user;\n    state.user.success = true;\n    state.user.isLoading = false;\n  },\n  UPDATE_USER_FAILURE(state, error) {\n    state.user.error = error;\n    state.user.success = false;\n    state.user.isLoading = false;\n  },\n};\n\nconst actions = {\n  async login({ commit }, params) {\n    // params {username, password}\n    commit(mutationTypes.GET_USER_REQUEST);\n    let res = null;\n    try {\n      res = await window.axios.post('/api/auth/login', params);\n      if (res.status === 201) {\n        commit(mutationTypes.GET_USER_SUCCESS, res.data.data);\n      } else {\n        commit(mutationTypes.GET_USER_FAILURE);\n      }\n    } catch (error) {\n      commit(mutationTypes.GET_USER_FAILURE, error);\n    }\n  },\n  async clearUserData({ commit }) {\n    commit(mutationTypes.CLEAR_USER_DATA);\n  },\n  async getUser({ commit }) {\n    const userId = window.$cookies.get('userId');\n    const role = window.$cookies.get('role');\n    if (userId && role) {\n      try {\n        commit(mutationTypes.GET_USER_REQUEST);\n        const res = await window.axios.get(`/api/v1/${role}/${userId}`);\n        if (res.status === 200) {\n          commit(mutationTypes.GET_USER_SUCCESS, res.data.data);\n        } else {\n          commit(mutationTypes.GET_USER_FAILURE);\n        }\n      } catch (error) {\n        commit(mutationTypes.GET_USER_FAILURE, error);\n      }\n    } else {\n      throw new Error('userId, role or user.data null');\n    }\n  },\n  async updateUser({ commit, state }, newUser) {\n    const userId = window.$cookies.get('userId');\n    const role = window.$cookies.get('role');\n    if (userId && role && state.user.data) {\n      try {\n        commit(mutationTypes.UPDATE_USER_REQUEST);\n        const res = await window.axios.put(`/api/v1/${role}/${userId}`, newUser);\n        if (res.status === 200) {\n          commit(mutationTypes.UPDATE_USER_SUCCESS, res.data.data);\n        } else {\n          commit(mutationTypes.UPDATE_USER_FAILURE);\n        }\n      } catch (error) {\n        commit(mutationTypes.UPDATE_USER_FAILURE, error);\n      }\n    } else {\n      throw new Error('userId, role or user.data null');\n    }\n  },\n  // async getBookings({ commit, state }) {\n  //   const userId = window.$cookies.get('userId');\n  //   const role = window.$cookies.get('role');\n  //   if (userId && role && state.user.data) {\n  //     try {\n  //       commit(mutationTypes.GET_BOOKINGS_REQUEST);\n  //       const res = await window.axios.get(`/api/v1/${role}/${userId}/bookings`);\n  //       if (res.status === 200) {\n  //         commit(mutationTypes.GET_BOOKINGS_SUCCESS, res.data.data);\n  //       } else {\n  //         commit(mutationTypes.GET_BOOKINGS_FAILURE);\n  //       }\n  //     } catch (error) {\n  //       commit(mutationTypes.GET_BOOKINGS_FAILURE, error);\n  //     }\n  //   } else {\n  //     throw new Error('You have to login before get bookings');\n  //   }\n  // },\n  // async getContracts({ commit, state }) {\n  //   const userId = window.$cookies.get('userId');\n  //   const role = window.$cookies.get('role');\n  //   if (userId && role && state.user.data) {\n  //     try {\n  //       commit(mutationTypes.GET_CONTRACTS_REQUEST);\n  //       const res = await window.axios.get(`/api/v1/${role}/${userId}/contracts`);\n  //       if (res.status === 200) {\n  //         commit(mutationTypes.GET_CONTRACTS_SUCCESS, res.data.data);\n  //       } else {\n  //         commit(mutationTypes.GET_CONTRACTS_FAILURE);\n  //       }\n  //     } catch (error) {\n  //       commit(mutationTypes.GET_CONTRACTS_FAILURE, error);\n  //     }\n  //   } else {\n  //     throw new Error('You have to login before get contracts');\n  //   }\n  // },\n  // async getOneBooking({ commit, state }, bookingId) {\n  //   const userId = window.$cookies.get('userId');\n  //   const role = window.$cookies.get('role');\n  //   if (userId && role && state.user.data) {\n  //     try {\n  //       const currentIds = state.bookings.data.map((booking) => booking.bookingId);\n  //       if (!currentIds.includes(bookingId)) {\n  //         commit(mutationTypes.GET_BOOKING_REQUEST);\n  //         const res = await window.axios.get(`/api/v1/bookings/${bookingId}`);\n  //         if (res.status === 200) {\n  //           res.data.data.new = true;\n  //           commit(mutationTypes.GET_BOOKING_SUCCESS, res.data.data);\n  //         } else {\n  //           commit(mutationTypes.GET_BOOKING_FAILURE);\n  //         }\n  //       } else {\n  //         console.log('this booking is already in store');\n  //       }\n  //     } catch (error) {\n  //       commit(mutationTypes.GET_BOOKING_FAILURE, error);\n  //     }\n  //   } else {\n  //     throw new Error('You have to login before get a new booking');\n  //   }\n  // },\n  // async createBooking({ commit, state }, booking) {\n  //   const userId = window.$cookies.get('userId');\n  //   const role = window.$cookies.get('role');\n  //   if (userId && role && state.user.data) {\n  //     try {\n  //       commit(mutationTypes.CREATE_BOOKING_REQUEST);\n  //       const res = await window.axios.post('/api/v1/bookings', booking);\n  //       if (res.status === 201) {\n  //         commit(mutationTypes.CREATE_BOOKING_SUCCESS, res.data.data);\n  //       }\n  //     } catch (error) {\n  //       commit(mutationTypes.CREATE_BOOKING_FAILURE, error);\n  //     }\n  //   } else {\n  //     throw new Error('You have to login before get a new booking');\n  //   }\n  // },\n  // async getDeals({ commit, state }) {\n  //   const userId = window.$cookies.get('userId');\n  //   const role = window.$cookies.get('role');\n  //   if (userId && role && state.user.data) {\n  //     try {\n  //       commit(mutationTypes.GET_DEALS_REQUEST);\n  //       const res = await window.axios.get(`/api/v1/${role}/${userId}/deals`);\n  //       if (res.status === 200) {\n  //         commit(mutationTypes.GET_DEALS_SUCCESS, res.data.data);\n  //       } else {\n  //         commit(mutationTypes.GET_DEALS_FAILURE);\n  //       }\n  //     } catch (error) {\n  //       commit(mutationTypes.GET_DEALS_FAILURE, error);\n  //     }\n  //   } else {\n  //     throw new Error('You have to login before get deals');\n  //   }\n  // },\n  // async createDeal({ commit, state }, deal) {\n  //   const userId = window.$cookies.get('userId');\n  //   const role = window.$cookies.get('role');\n  //   if (userId && role && state.user.data) {\n  //     try {\n  //       commit(mutationTypes.CREATE_DEAL_REQUEST);\n  //       const res = await window.axios.post('/api/v1/deals', deal);\n  //       if (res.status === 201) {\n  //         commit(mutationTypes.CREATE_DEAL_SUCCESS, res.data.data);\n  //       } else {\n  //         commit(mutationTypes.CREATE_DEAL_FAILURE);\n  //       }\n  //     } catch (error) {\n  //       commit(mutationTypes.CREATE_DEAL_FAILURE, error);\n  //     }\n  //   } else {\n  //     throw new Error('You have to login before get deals');\n  //   }\n  // },\n  // async getDeal({ commit, state }, dealIds) {\n  //   const userId = window.$cookies.get('userId');\n  //   const role = window.$cookies.get('role');\n  //   const currentIds = state.deals.data.map((deal) => deal.dealId);\n  //   const newIds = dealIds.filter((newId) => !currentIds.includes(newId));\n  //   if (newIds.lenght > 0) {\n  //     if (userId && role && state.user.data) {\n  //       try {\n  //         commit(mutationTypes.GET_DEAL_REQUEST);\n  //         const res = await window.axios.get(`/api/v1/deals/${newIds[0]}`);\n  //         if (res.status === 200) {\n  //           commit(mutationTypes.GET_DEAL_SUCCESS, res.data.data);\n  //         } else {\n  //           commit(mutationTypes.GET_DEAL_FAILURE);\n  //         }\n  //       } catch (error) {\n  //         commit(mutationTypes.GET_DEAL_FAILURE, error);\n  //       }\n  //     } else {\n  //       throw new Error('You have to login before get deals');\n  //     }\n  //   } else {\n  //     console.log('not a new deal');\n  //   }\n  // },\n  // async cancelDeal({ commit, state }, dealId) {\n  //   const userId = window.$cookies.get('userId');\n  //   const role = window.$cookies.get('role');\n  //   if (userId && role && state.user.data) {\n  //     try {\n  //       const deal = state.deals.data.filter((item) => item.dealId === dealId)[0];\n  //       if (deal) {\n  //         commit(mutationTypes.CANCEL_DEAL_REQUEST);\n  //         const res = await window.axios.put('/api/v1/deals', {\n  //           dealId,\n  //           renterId: deal.renter.renterId,\n  //           vendorId: deal.vendor.vendorId,\n  //           typeId: deal.type.typeId,\n  //           status: 'CANCELED',\n  //           offeredPrice: deal.offeredPrice,\n  //         });\n  //         if (res.status === 200) {\n  //           commit(mutationTypes.CANCEL_DEAL_SUCCESS, res.data.data);\n  //         }\n  //       } else {\n  //         console.log('deal is null');\n  //       }\n  //     } catch (error) {\n  //       commit(mutationTypes.CANCEL_DEAL_FAILURE, error);\n  //     }\n  //   } else {\n  //     throw new Error('you are not loged in');\n  //   }\n  // },\n  // async cancelBooking({ commit, state }, bookingId) {\n  //   const userId = window.$cookies.get('userId');\n  //   const role = window.$cookies.get('role');\n  //   if (userId && role && state.user.data) {\n  //     try {\n  //       const booking = state.bookings.data.filter((item) => item.bookingId === bookingId)[0];\n  //       if (booking) {\n  //         commit(mutationTypes.CANCEL_BOOKING_REQUEST);\n  //         const res = await window.axios.put(`/api/v1/bookings/${bookingId}`, {\n  //           bookingId,\n  //           dealId: booking.deal.dealId,\n  //           typeId: booking.type.typeId,\n  //           renterId: booking.renter.renterId,\n  //           vendorId: booking.vendor.vendorId,\n  //           status: 'CANCELLED',\n  //           meetTime: booking.meetTime,\n  //           qrCode: booking.qrCode,\n  //         });\n  //         if (res.status === 200) {\n  //           commit(mutationTypes.CANCEL_BOOKING_SUCCESS, res.data.data);\n  //         }\n  //       } else {\n  //         console.log(`booking ${bookingId} is not existed in store`);\n  //       }\n  //     } catch (error) {\n  //       commit(mutationTypes.CREATE_BOOKING_FAILURE, error);\n  //     }\n  //   } else {\n  //     throw new Error('you are not loged in');\n  //   }\n  // },\n  // async updateBookingStatus({ commit, state }, bookingId) {\n  //   const userId = window.$cookies.get('userId');\n  //   const role = window.$cookies.get('role');\n  //   if (userId && role && state.user.data) {\n  //     try {\n  //       const booking = state.bookings.data.filter((item) => item.bookingId === bookingId)[0];\n  //       if (booking) {\n  //         commit(mutationTypes.DONE_BOOKING_REQUEST);\n  //         const res = await window.axios.put(`/api/v1/bookings/${bookingId}`, {\n  //           bookingId,\n  //           dealId: booking.deal ? booking.deal.dealId : null,\n  //           typeId: booking.type.typeId,\n  //           renterId: booking.renter.renterId,\n  //           vendorId: booking.vendor.vendorId,\n  //           status: 'DONE',\n  //           meetTime: booking.meetTime,\n  //           qrCode: booking.qrCode,\n  //         });\n  //         if (res.status === 200) {\n  //           commit(mutationTypes.DONE_BOOKING_SUCCESS, bookingId);\n  //         }\n  //       } else {\n  //         console.log(`booking ${bookingId} is not existed in store`);\n  //       }\n  //     } catch (error) {\n  //       commit(mutationTypes.DONE_BOOKING_FAILURE, error);\n  //     }\n  //   } else {\n  //     throw new Error('you are not loged in');\n  //   }\n  // },\n};\n\nexport default {\n  namespaced: true,\n  state: myState,\n  mutations,\n  getters: myGetters,\n  actions,\n};\n"]}]}