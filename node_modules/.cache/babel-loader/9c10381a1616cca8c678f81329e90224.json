{"remainingRequest":"D:\\capstone\\DrowsinessFrontEnd\\node_modules\\babel-loader\\lib\\index.js!D:\\capstone\\DrowsinessFrontEnd\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\capstone\\DrowsinessFrontEnd\\src\\store\\modules\\user.js","dependencies":[{"path":"D:\\capstone\\DrowsinessFrontEnd\\src\\store\\modules\\user.js","mtime":1626105829620},{"path":"D:\\capstone\\DrowsinessFrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\capstone\\DrowsinessFrontEnd\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\capstone\\DrowsinessFrontEnd\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/capstone/DrowsinessFrontEnd/src/store/modules/user.js"],"names":["myState","user","data","isLoading","success","error","drivers","devices","trackings","myGetters","mutationTypes","GET_USER_REQUEST","GET_USER_SUCCESS","GET_USER_FAILURE","UPDATE_USER_REQUEST","UPDATE_USER_SUCCESS","UPDATE_USER_FAILURE","CLEAR_USER_DATA","GET_DRIVERS_REQUEST","GET_DRIVERS_SUCCESS","GET_DRIVERS_FAILURE","GET_DEVICES_REQUEST","GET_DEVICES_SUCCESS","GET_DEVICES_FAILURE","CREATE_DEVICE_REQUEST","CREATE_DEVICE_SUCCESS","CREATE_DEVICE_FAILURE","GET_TRACKINGS_REQUEST","GET_TRACKINGS_SUCCESS","GET_TRACKINGS_FAILURE","mutations","state","device","push","driver","results","filter","item","userId","actions","login","params","commit","res","window","axios","post","status","clearUserData","getUser","$cookies","get","Error","updateUser","newUser","put","getDrivers","console","log","getDevices","createDevice","getTrackings","namespaced","getters"],"mappings":"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","sourcesContent":["const myState = () => ({\n  user: {\n    data: null,\n    isLoading: false,\n    success: null,\n    error: null,\n  },\n  drivers: {\n    data: [],\n    isLoading: false,\n    success: null,\n    error: null,\n  },\n  devices: {\n    data: [],\n    isLoading: false,\n    success: null,\n    error: null,\n  },\n  trackings: {\n    data: [],\n    isLoading: false,\n    success: null,\n    error: null,\n  },\n  // bookings: {\n  //   data: [],\n  //   isLoading: false,\n  //   success: null,\n  //   error: null,\n  //   newlyCreated: null,\n  // },\n  // deals: {\n  //   data: [],\n  //   isLoading: false,\n  //   success: null,\n  //   error: null,\n  //   newlyCreated: null,\n  // },\n});\n\nconst myGetters = {\n  // get lasted deal\n  // findLastedDeal: (state) => (renterId, vendorId, typeId) => {\n  //   let result = state.deals.data.filter((deal) => {\n  //     if (deal.renter.renterId === renterId &&\n  //       deal.vendor.vendorId === vendorId &&\n  //       deal.type.typeId === typeId &&\n  //       deal.status === 'CREATED') {\n  //       return true;\n  //     }\n  //     return false;\n  //   });\n  //   result = result.sort((deal1, deal2) => deal1.creationTime - deal2.creationTime);\n  //   console.log(`lasted deal: ${result[0]}`);\n  //   return result[0];\n  // },\n  // findPendingBooking: (state) => (renterId, vendorId, typeId) => {\n  //   const result = state.bookings.data.filter((booking) => {\n  //     if (booking.renter.renterId === renterId &&\n  //       booking.vendor.vendorId === vendorId &&\n  //       booking.type.typeId === typeId &&\n  //       booking.status === 'INCOMING') {\n  //       return true;\n  //     }\n  //     return false;\n  //   });\n  //   console.log(`pending booking ${result[0]}`);\n  //   return result[0];\n  // },\n};\nconst mutationTypes = {\n  GET_USER_REQUEST: 'GET_USER_REQUEST',\n  GET_USER_SUCCESS: 'GET_USER_SUCCESS',\n  GET_USER_FAILURE: 'GET_USER_FAILURE',\n  UPDATE_USER_REQUEST: 'UPDATE_USER_REQUEST',\n  UPDATE_USER_SUCCESS: 'UPDATE_USER_SUCCESS',\n  UPDATE_USER_FAILURE: 'UPDATE_USER_FAILURE',\n  CLEAR_USER_DATA: 'CLEAR_USER_DATA',\n  GET_DRIVERS_REQUEST: 'GET_DRIVERS_REQUEST',\n  GET_DRIVERS_SUCCESS: 'GET_DRIVERS_SUCCESS',\n  GET_DRIVERS_FAILURE: 'GET_DRIVERS_FAILURE',\n  GET_DEVICES_REQUEST: 'GET_DEVICES_REQUEST',\n  GET_DEVICES_SUCCESS: 'GET_DEVICES_SUCCESS',\n  GET_DEVICES_FAILURE: 'GET_DEVICES_FAILURE',\n  CREATE_DEVICE_REQUEST: 'CREATE_DEVICE_REQUEST',\n  CREATE_DEVICE_SUCCESS: 'CREATE_DEVICE_SUCCESS',\n  CREATE_DEVICE_FAILURE: 'CREATE_DEVICE_FAILURE',\n  GET_TRACKINGS_REQUEST: 'GET_TRACKINGS_REQUEST',\n  GET_TRACKINGS_SUCCESS: 'GET_TRACKINGS_SUCCESS',\n  GET_TRACKINGS_FAILURE: 'GET_TRACKINGS_FAILURE',\n  // CREATE_BOOKING_REQUEST: 'CREATE_BOOKING_REQUEST',\n  // CREATE_BOOKING_SUCCESS: 'CREATE_BOOKING_SUCCESS',\n  // CREATE_BOOKING_FAILURE: 'CREATE_BOOKING_FAILURE',\n  // GET_DEALS_REQUEST: 'GET_DEALS_REQUEST',\n  // GET_DEALS_SUCCESS: 'GET_DEALS_SUCCESS',\n  // GET_DEALS_FAILURE: 'GET_DEALS_FAILURE',\n  // CREATE_DEAL_REQUEST: 'CREATE_DEAL_REQUEST',\n  // CREATE_DEAL_SUCCESS: 'CREATE_DEAL_SUCCESS',\n  // CREATE_DEAL_FAILURE: 'CREATE_DEAL_FAILURE',\n  // GET_DEAL_REQUEST: 'GET_DEAL_REQUEST',\n  // GET_DEAL_SUCCESS: 'GET_DEAL_SUCCESS',\n  // GET_DEAL_FAILURE: 'GET_DEAL_FAILURE',\n  // CANCEL_DEAL_REQUEST: 'CANCEL_DEAL_REQUEST',\n  // CANCEL_DEAL_SUCCESS: 'CANCEL_DEAL_SUCCESS',\n  // CANCEL_DEAL_FAILURE: 'CANCEL_DEAL_FAILURE',\n  // CANCEL_BOOKING_REQUEST: 'CANCEL_BOOKING_REQUEST',\n  // CANCEL_BOOKING_SUCCESS: 'CANCEL_BOOKING_SUCCESS',\n  // CANCEL_BOOKING_FAILURE: 'CANCEL_BOOKING_FAILURE',\n  // DONE_BOOKING_REQUEST: 'DONE_BOOKING_REQUEST',\n  // DONE_BOOKING_SUCCESS: 'DONE_BOOKING_SUCCESS',\n  // DONE_BOOKING_FAILURE: 'DONE_BOOKING_FAILURE',\n};\nconst mutations = {\n  CLEAR_USER_DATA(state) {\n    state.user.data = null;\n    state.user.isLoading = false;\n    state.user.success = false;\n  },\n  GET_USER_REQUEST(state) {\n    state.user.isLoading = true;\n  },\n  GET_USER_SUCCESS(state, user) {\n    state.user.data = user;\n    state.user.isLoading = false;\n    state.user.success = true;\n  },\n  GET_USER_FAILURE(state, error) {\n    state.user.isLoading = false;\n    state.user.success = false;\n    state.user.error = error;\n  },\n  GET_DRIVERS_REQUEST(state) {\n    state.drivers.isLoading = true;\n  },\n  GET_DRIVERS_SUCCESS(state, drivers) {\n    state.drivers.data = drivers;\n    state.drivers.isLoading = false;\n    state.drivers.success = true;\n  },\n  GET_DRIVERS_FAILURE(state, error) {\n    state.drivers.isLoading = false;\n    state.drivers.success = false;\n    state.drivers.error = error;\n  },\n  GET_DEVICES_REQUEST(state) {\n    state.devices.isLoading = true;\n  },\n  GET_DEVICES_SUCCESS(state, devices) {\n    state.devices.data = devices;\n    state.devices.isLoading = false;\n    state.devices.success = true;\n  },\n  GET_DEVICES_FAILURE(state, error) {\n    state.devices.isLoading = false;\n    state.devices.success = false;\n    state.devices.error = error;\n  },\n  CREATE_DEVICE_REQUEST(state) {\n    state.devices.isLoading = true;\n  },\n  CREATE_DEVICE_SUCCESS(state, device) {\n    state.devices.data.push(device);\n    // state.bookings.newlyCreated = booking;\n    state.devices.isLoading = false;\n    state.devices.success = true;\n  },\n  CREATE_DEVICE_FAILURE(state, error) {\n    state.devices.isLoading = false;\n    state.devices.success = false;\n    state.devices.error = error;\n  },\n  GET_TRACKINGS_REQUEST(state) {\n    state.trackings.isLoading = true;\n  },\n  GET_TRACKINGS_SUCCESS(state, trackings) {\n    state.trackings.data = trackings;\n    state.trackings.isLoading = false;\n    state.trackings.success = true;\n  },\n  GET_TRACKINGS_FAILURE(state, error) {\n    state.trackings.isLoading = false;\n    state.trackings.success = false;\n    state.trackings.error = error;\n  },\n  // CREATE_BOOKING_REQUEST(state) {\n  //   state.bookings.isLoading = true;\n  // },\n  // CREATE_BOOKING_SUCCESS(state, booking) {\n  //   state.bookings.data.push(booking);\n  //   state.bookings.newlyCreated = booking;\n  //   state.bookings.isLoading = false;\n  //   state.bookings.success = true;\n  // },\n  // CREATE_BOOKING_FAILURE(state, error) {\n  //   state.bookings.isLoading = false;\n  //   state.bookings.success = false;\n  //   state.bookings.error = error;\n  // },\n  // GET_DEALS_REQUEST(state) {\n  //   state.deals.isLoading = false;\n  // },\n  // GET_DEALS_SUCCESS(state, deals) {\n  //   state.deals.data = deals;\n  //   state.deals.isLoading = false;\n  //   state.deals.success = true;\n  // },\n  // GET_DEALS_FAILURE(state, error) {\n  //   state.deals.isLoading = false;\n  //   state.deals.success = false;\n  //   state.deals.error = error;\n  // },\n  // CREATE_DEAL_REQUEST(state) {\n  //   state.deals.isLoading = false;\n  // },\n  // CREATE_DEAL_SUCCESS(state, deal) {\n  //   state.deals.data.push(deal);\n  //   state.deals.newlyCreated = deal;\n  //   state.deals.success = true;\n  //   state.deals.isLoading = false;\n  // },\n  // CREATE_DEAL_FAILURE(state, error) {\n  //   state.deals.success = false;\n  //   state.deals.error = error;\n  // },\n  // GET_DEAL_REQUEST(state) {\n  //   state.deals.isLoading = false;\n  // },\n  // GET_DEAL_SUCCESS(state, deal) {\n  //   state.deals.data.push(deal);\n  //   state.deals.newlyCreated = deal;\n  //   state.deals.success = true;\n  //   state.deals.isLoading = false;\n  // },\n  // GET_DEAL_FAILURE(state, error) {\n  //   state.deals.success = false;\n  //   state.deals.error = error;\n  // },\n  // CANCEL_DEAL_REQUEST(state) {\n  //   state.deals.isLoading = true;\n  // },\n  // CANCEL_DEAL_SUCCESS(state, dealId) {\n  //   state.deals.isLoading = false;\n  //   state.deals.success = true;\n  //   const res = state.deals.data.filter((deal) => deal.dealId === dealId);\n  //   res[0].status = 'CANCEL';\n  // },\n  // CANCEL_DEAL_FAILURE(state, error) {\n  //   state.deals.isLoading = false;\n  //   state.deals.error = error;\n  // },\n  // CANCEL_BOOKING_REQUEST(state) {\n  //   state.bookings.isLoading = true;\n  // },\n  // CANCEL_BOOKING_SUCCESS(state, bookingId) {\n  //   state.bookings.isLoading = false;\n  //   state.bookings.success = true;\n  //   const res = state.bookings.data.filter((book) => book.bookingId === bookingId);\n  //   res[0].status = 'CANCEL';\n  // },\n  // CANCEL_BOOKING_FAILURE(state, error) {\n  //   state.bookings.isLoading = false;\n  //   state.bookings.error = error;\n  // },\n  // DONE_BOOKING_REQUEST(state) {\n  //   state.bookings.isLoading = true;\n  // },\n  // DONE_BOOKING_SUCCESS(state, bookingId) {\n  //   state.bookings.isLoading = false;\n  //   state.bookings.success = true;\n  //   const res = state.bookings.data.filter((book) => book.bookingId === bookingId);\n  //   res[0].status = 'DONE';\n  // },\n  // DONE_BOOKING_FAILURE(state, error) {\n  //   state.bookings.isLoading = false;\n  //   state.bookings.error = error;\n  // },\n  UPDATE_USER_REQUEST(state) {\n    state.drivers.isLoading = true;\n  },\n  UPDATE_USER_SUCCESS(state, driver) {\n    state.drivers.data.results = state.drivers.data.results.filter(\n      (item) => driver.userId !== item.userId,\n    );\n    state.drivers.data.results.push(driver);\n    state.drivers.success = true;\n    state.drivers.isLoading = false;\n  },\n  UPDATE_USER_FAILURE(state, error) {\n    state.drivers.error = error;\n    state.drivers.success = false;\n    state.drivers.isLoading = false;\n  },\n};\n\nconst actions = {\n  async login({ commit }, params) {\n    // params {username, password}\n    commit(mutationTypes.GET_USER_REQUEST);\n    let res = null;\n    try {\n      res = await window.axios.post('/api/auth/login', params);\n      if (res.status === 201) {\n        commit(mutationTypes.GET_USER_SUCCESS, res.data.data);\n      } else {\n        commit(mutationTypes.GET_USER_FAILURE);\n      }\n    } catch (error) {\n      commit(mutationTypes.GET_USER_FAILURE, error);\n    }\n  },\n  async clearUserData({ commit }) {\n    commit(mutationTypes.CLEAR_USER_DATA);\n  },\n  async getUser({ commit }) {\n    const userId = window.$cookies.get('userId');\n    if (userId) {\n      try {\n        commit(mutationTypes.GET_USER_REQUEST);\n        const res = 1;\n        // const res = await window.axios.get(`/api/v1/users/${userId}`);\n        if (res.status === 200) {\n          commit(mutationTypes.GET_USER_SUCCESS, res.data.data);\n        } else {\n          commit(mutationTypes.GET_USER_FAILURE);\n        }\n      } catch (error) {\n        commit(mutationTypes.GET_USER_FAILURE, error);\n      }\n    } else {\n      throw new Error('userId, role or user.data null');\n    }\n  },\n  async updateUser({ commit }, newUser) {\n    const userId = window.$cookies.get('userId');\n    if (userId) {\n      try {\n        commit(mutationTypes.UPDATE_USER_REQUEST);\n        const res = await window.axios.put(`/api/v1/users/${userId}`, newUser);\n        if (res.status === 200) {\n          commit(mutationTypes.UPDATE_USER_SUCCESS, res.data.data);\n        } else {\n          commit(mutationTypes.UPDATE_USER_FAILURE);\n        }\n      } catch (error) {\n        commit(mutationTypes.UPDATE_USER_FAILURE, error);\n      }\n    } else {\n      throw new Error('userId or user.data null');\n    }\n  },\n\n  async getDrivers({ commit }) {\n    const userId = window.$cookies.get('userId');\n    if (userId) {\n      try {\n        commit(mutationTypes.GET_DRIVERS_REQUEST);\n        const res = await window.axios.get('/api/v1/users');\n        console.log(`res :${res.data}`);\n        if (res.status === 200) {\n          commit(mutationTypes.GET_DRIVERS_SUCCESS, res.data);\n        } else {\n          commit(mutationTypes.GET_DRIVERS_FAILURE);\n        }\n      } catch (error) {\n        commit(mutationTypes.GET_DRIVERS_FAILURE, error);\n      }\n    } else {\n      throw new Error('You have to login before get drivers');\n    }\n  },\n\n  async getDevices({ commit }) {\n    const userId = window.$cookies.get('userId');\n    if (userId) {\n      try {\n        commit(mutationTypes.GET_DEVICES_REQUEST);\n        const res = await window.axios.get('/api/v1/devices');\n        console.log(`res :${res.data}`);\n        if (res.status === 200) {\n          commit(mutationTypes.GET_DEVICES_SUCCESS, res.data);\n        } else {\n          commit(mutationTypes.GET_DEVICES_FAILURE);\n        }\n      } catch (error) {\n        commit(mutationTypes.GET_DEVICES_FAILURE, error);\n      }\n    } else {\n      throw new Error('You have to login before get drivers');\n    }\n  },\n\n  async createDevice({ commit }, device) {\n    const userId = window.$cookies.get('userId');\n    if (userId) {\n      try {\n        commit(mutationTypes.CREATE_DEVICE_REQUEST);\n        const res = await window.axios.post('/api/v1/devices', device);\n        if (res.status === 201) {\n          commit(mutationTypes.CREATE_DEVICE_SUCCESS, res.data.data);\n        }\n      } catch (error) {\n        commit(mutationTypes.CREATE_DEVICE_FAILURE, error);\n      }\n    } else {\n      throw new Error('You have to login before get a new booking');\n    }\n  },\n\n  async getTrackings({ commit }) {\n    const userId = window.$cookies.get('userId');\n    if (userId) {\n      try {\n        commit(mutationTypes.GET_TRACKINGS_REQUEST);\n        const res = await window.axios.get('/api/v1/data-trackings-infos');\n        if (res.status === 200) {\n          commit(mutationTypes.GET_TRACKINGS_SUCCESS, res.data);\n        } else {\n          commit(mutationTypes.GET_TRACKINGS_FAILURE);\n        }\n      } catch (error) {\n        commit(mutationTypes.GET_TRACKINGS_FAILURE, error);\n      }\n    } else {\n      throw new Error('You have to login before get drivers');\n    }\n  },\n  // async getBookings({ commit, state }) {\n  //   const userId = window.$cookies.get('userId');\n  //   const role = window.$cookies.get('role');\n  //   if (userId && role && state.user.data) {\n  //     try {\n  //       commit(mutationTypes.GET_BOOKINGS_REQUEST);\n  //       const res = await window.axios.get(`/api/v1/${role}/${userId}/bookings`);\n  //       if (res.status === 200) {\n  //         commit(mutationTypes.GET_BOOKINGS_SUCCESS, res.data.data);\n  //       } else {\n  //         commit(mutationTypes.GET_BOOKINGS_FAILURE);\n  //       }\n  //     } catch (error) {\n  //       commit(mutationTypes.GET_BOOKINGS_FAILURE, error);\n  //     }\n  //   } else {\n  //     throw new Error('You have to login before get bookings');\n  //   }\n  // },\n\n  // async getOneBooking({ commit, state }, bookingId) {\n  //   const userId = window.$cookies.get('userId');\n  //   const role = window.$cookies.get('role');\n  //   if (userId && role && state.user.data) {\n  //     try {\n  //       const currentIds = state.bookings.data.map((booking) => booking.bookingId);\n  //       if (!currentIds.includes(bookingId)) {\n  //         commit(mutationTypes.GET_BOOKING_REQUEST);\n  //         const res = await window.axios.get(`/api/v1/bookings/${bookingId}`);\n  //         if (res.status === 200) {\n  //           res.data.data.new = true;\n  //           commit(mutationTypes.GET_BOOKING_SUCCESS, res.data.data);\n  //         } else {\n  //           commit(mutationTypes.GET_BOOKING_FAILURE);\n  //         }\n  //       } else {\n  //         console.log('this booking is already in store');\n  //       }\n  //     } catch (error) {\n  //       commit(mutationTypes.GET_BOOKING_FAILURE, error);\n  //     }\n  //   } else {\n  //     throw new Error('You have to login before get a new booking');\n  //   }\n  // },\n  // async createBooking({ commit, state }, booking) {\n  //   const userId = window.$cookies.get('userId');\n  //   const role = window.$cookies.get('role');\n  //   if (userId && role && state.user.data) {\n  //     try {\n  //       commit(mutationTypes.CREATE_BOOKING_REQUEST);\n  //       const res = await window.axios.post('/api/v1/bookings', booking);\n  //       if (res.status === 201) {\n  //         commit(mutationTypes.CREATE_BOOKING_SUCCESS, res.data.data);\n  //       }\n  //     } catch (error) {\n  //       commit(mutationTypes.CREATE_BOOKING_FAILURE, error);\n  //     }\n  //   } else {\n  //     throw new Error('You have to login before get a new booking');\n  //   }\n  // },\n  // async getDeals({ commit, state }) {\n  //   const userId = window.$cookies.get('userId');\n  //   const role = window.$cookies.get('role');\n  //   if (userId && role && state.user.data) {\n  //     try {\n  //       commit(mutationTypes.GET_DEALS_REQUEST);\n  //       const res = await window.axios.get(`/api/v1/${role}/${userId}/deals`);\n  //       if (res.status === 200) {\n  //         commit(mutationTypes.GET_DEALS_SUCCESS, res.data.data);\n  //       } else {\n  //         commit(mutationTypes.GET_DEALS_FAILURE);\n  //       }\n  //     } catch (error) {\n  //       commit(mutationTypes.GET_DEALS_FAILURE, error);\n  //     }\n  //   } else {\n  //     throw new Error('You have to login before get deals');\n  //   }\n  // },\n  // async createDeal({ commit, state }, deal) {\n  //   const userId = window.$cookies.get('userId');\n  //   const role = window.$cookies.get('role');\n  //   if (userId && role && state.user.data) {\n  //     try {\n  //       commit(mutationTypes.CREATE_DEAL_REQUEST);\n  //       const res = await window.axios.post('/api/v1/deals', deal);\n  //       if (res.status === 201) {\n  //         commit(mutationTypes.CREATE_DEAL_SUCCESS, res.data.data);\n  //       } else {\n  //         commit(mutationTypes.CREATE_DEAL_FAILURE);\n  //       }\n  //     } catch (error) {\n  //       commit(mutationTypes.CREATE_DEAL_FAILURE, error);\n  //     }\n  //   } else {\n  //     throw new Error('You have to login before get deals');\n  //   }\n  // },\n  // async getDeal({ commit, state }, dealIds) {\n  //   const userId = window.$cookies.get('userId');\n  //   const role = window.$cookies.get('role');\n  //   const currentIds = state.deals.data.map((deal) => deal.dealId);\n  //   const newIds = dealIds.filter((newId) => !currentIds.includes(newId));\n  //   if (newIds.lenght > 0) {\n  //     if (userId && role && state.user.data) {\n  //       try {\n  //         commit(mutationTypes.GET_DEAL_REQUEST);\n  //         const res = await window.axios.get(`/api/v1/deals/${newIds[0]}`);\n  //         if (res.status === 200) {\n  //           commit(mutationTypes.GET_DEAL_SUCCESS, res.data.data);\n  //         } else {\n  //           commit(mutationTypes.GET_DEAL_FAILURE);\n  //         }\n  //       } catch (error) {\n  //         commit(mutationTypes.GET_DEAL_FAILURE, error);\n  //       }\n  //     } else {\n  //       throw new Error('You have to login before get deals');\n  //     }\n  //   } else {\n  //     console.log('not a new deal');\n  //   }\n  // },\n  // async cancelDeal({ commit, state }, dealId) {\n  //   const userId = window.$cookies.get('userId');\n  //   const role = window.$cookies.get('role');\n  //   if (userId && role && state.user.data) {\n  //     try {\n  //       const deal = state.deals.data.filter((item) => item.dealId === dealId)[0];\n  //       if (deal) {\n  //         commit(mutationTypes.CANCEL_DEAL_REQUEST);\n  //         const res = await window.axios.put('/api/v1/deals', {\n  //           dealId,\n  //           renterId: deal.renter.renterId,\n  //           vendorId: deal.vendor.vendorId,\n  //           typeId: deal.type.typeId,\n  //           status: 'CANCELED',\n  //           offeredPrice: deal.offeredPrice,\n  //         });\n  //         if (res.status === 200) {\n  //           commit(mutationTypes.CANCEL_DEAL_SUCCESS, res.data.data);\n  //         }\n  //       } else {\n  //         console.log('deal is null');\n  //       }\n  //     } catch (error) {\n  //       commit(mutationTypes.CANCEL_DEAL_FAILURE, error);\n  //     }\n  //   } else {\n  //     throw new Error('you are not loged in');\n  //   }\n  // },\n  // async cancelBooking({ commit, state }, bookingId) {\n  //   const userId = window.$cookies.get('userId');\n  //   const role = window.$cookies.get('role');\n  //   if (userId && role && state.user.data) {\n  //     try {\n  //       const booking = state.bookings.data.filter((item) => item.bookingId === bookingId)[0];\n  //       if (booking) {\n  //         commit(mutationTypes.CANCEL_BOOKING_REQUEST);\n  //         const res = await window.axios.put(`/api/v1/bookings/${bookingId}`, {\n  //           bookingId,\n  //           dealId: booking.deal.dealId,\n  //           typeId: booking.type.typeId,\n  //           renterId: booking.renter.renterId,\n  //           vendorId: booking.vendor.vendorId,\n  //           status: 'CANCELLED',\n  //           meetTime: booking.meetTime,\n  //           qrCode: booking.qrCode,\n  //         });\n  //         if (res.status === 200) {\n  //           commit(mutationTypes.CANCEL_BOOKING_SUCCESS, res.data.data);\n  //         }\n  //       } else {\n  //         console.log(`booking ${bookingId} is not existed in store`);\n  //       }\n  //     } catch (error) {\n  //       commit(mutationTypes.CREATE_BOOKING_FAILURE, error);\n  //     }\n  //   } else {\n  //     throw new Error('you are not loged in');\n  //   }\n  // },\n  // async updateBookingStatus({ commit, state }, bookingId) {\n  //   const userId = window.$cookies.get('userId');\n  //   const role = window.$cookies.get('role');\n  //   if (userId && role && state.user.data) {\n  //     try {\n  //       const booking = state.bookings.data.filter((item) => item.bookingId === bookingId)[0];\n  //       if (booking) {\n  //         commit(mutationTypes.DONE_BOOKING_REQUEST);\n  //         const res = await window.axios.put(`/api/v1/bookings/${bookingId}`, {\n  //           bookingId,\n  //           dealId: booking.deal ? booking.deal.dealId : null,\n  //           typeId: booking.type.typeId,\n  //           renterId: booking.renter.renterId,\n  //           vendorId: booking.vendor.vendorId,\n  //           status: 'DONE',\n  //           meetTime: booking.meetTime,\n  //           qrCode: booking.qrCode,\n  //         });\n  //         if (res.status === 200) {\n  //           commit(mutationTypes.DONE_BOOKING_SUCCESS, bookingId);\n  //         }\n  //       } else {\n  //         console.log(`booking ${bookingId} is not existed in store`);\n  //       }\n  //     } catch (error) {\n  //       commit(mutationTypes.DONE_BOOKING_FAILURE, error);\n  //     }\n  //   } else {\n  //     throw new Error('you are not loged in');\n  //   }\n  // },\n};\n\nexport default {\n  namespaced: true,\n  state: myState,\n  mutations,\n  getters: myGetters,\n  actions,\n};\n"]}]}