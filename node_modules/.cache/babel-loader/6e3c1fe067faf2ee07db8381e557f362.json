{"remainingRequest":"D:\\capstone\\DrowsinessFrontEnd\\node_modules\\babel-loader\\lib\\index.js!D:\\capstone\\DrowsinessFrontEnd\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\capstone\\DrowsinessFrontEnd\\src\\components\\mixins\\pushNotification.js","dependencies":[{"path":"D:\\capstone\\DrowsinessFrontEnd\\src\\components\\mixins\\pushNotification.js","mtime":1625294394742},{"path":"D:\\capstone\\DrowsinessFrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\capstone\\DrowsinessFrontEnd\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\capstone\\DrowsinessFrontEnd\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiRDovY2Fwc3RvbmUvRHJvd3NpbmVzc0Zyb250RW5kL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiRDovY2Fwc3RvbmUvRHJvd3NpbmVzc0Zyb250RW5kL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyIjsKaW1wb3J0IHsgbWFwU3RhdGUsIG1hcEFjdGlvbnMgfSBmcm9tICd2dWV4JzsKaW1wb3J0IGZpcmViYXNlIGZyb20gJy4uLy4uL2NvbmZpZy9maXJlYmFzZSc7CmltcG9ydCBjb25zdGFudCBmcm9tICcuLi8uLi9jb25maWcvY29uc3RhbnQnOwp2YXIgbWVzc2FnaW5nID0gZmlyZWJhc2UubWVzc2FnaW5nOwp2YXIgcHVzaE5vdGlmaWNhdGlvbk1peGlucyA9IHsKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHt9OwogIH0sCiAgbWV0aG9kczogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBtYXBBY3Rpb25zKHsKICAgIHVwZGF0ZVVzZXI6ICd1c2VyL3VwZGF0ZVVzZXInLAogICAgdXBkYXRlVXNlckZpcmViYXNlVG9rZW46ICd1c2VyL3VwZGF0ZVVzZXJGaXJlYmFzZVRva2VuJywKICAgIGdldFVzZXI6ICd1c2VyL2dldFVzZXInCiAgfSkpLCB7fSwgewogICAgZ2V0TWVzc2FnaW5nVG9rZW46IGZ1bmN0aW9uIGdldE1lc3NhZ2luZ1Rva2VuKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgbWVzc2FnaW5nLmdldFRva2VuKHsKICAgICAgICB2YXBpZEtleTogY29uc3RhbnQuUFVCTElDX1ZBUElEX0tFWQogICAgICB9KS50aGVuKCAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKHRva2VuKSB7CiAgICAgICAgICB2YXIgY3VycmVudE1lc3NhZ2VUb2tlbjsKICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgaWYgKCF0b2tlbikgewogICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4OwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAvLyBjb25zdCBjdXJyZW50TWVzc2FnZVRva2VuID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdtZXNzYWdpbmdUb2tlbicpOwogICAgICAgICAgICAgICAgICBjdXJyZW50TWVzc2FnZVRva2VuID0gX3RoaXMudXNlckRhdGFGb3JDaGVja2luZy5maXJlYmFzZVRva2VuOwogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndG9rZW4gd2lsbCBiZSB1cGRhdGVkJywgY3VycmVudE1lc3NhZ2VUb2tlbiAhPT0gdG9rZW4pOwoKICAgICAgICAgICAgICAgICAgaWYgKCEoY3VycmVudE1lc3NhZ2VUb2tlbiAhPT0gdG9rZW4pKSB7CiAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDY7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2OwogICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuc2F2ZVRva2VuKHRva2VuKTsKCiAgICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnTm8gSW5zdGFuY2UgSUQgdG9rZW4gYXZhaWxhYmxlLiBSZXF1ZXN0IHBlcm1pc3Npb24gdG8gZ2VuZXJhdGUgb25lLicpOwoKICAgICAgICAgICAgICAgICAgX3RoaXMubm90aWZpY2F0aW9uc1Blcm1pc2lvblJlcXVlc3QoKTsKCiAgICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sIF9jYWxsZWUpOwogICAgICAgIH0pKTsKCiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChfeCkgewogICAgICAgICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICB9OwogICAgICB9KCkpLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICBjb25zb2xlLmxvZygnQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgcmV0cmlldmluZyB0b2tlbi4gJywgZXJyKTsKICAgICAgfSk7CiAgICB9LAogICAgbm90aWZpY2F0aW9uc1Blcm1pc2lvblJlcXVlc3Q6IGZ1bmN0aW9uIG5vdGlmaWNhdGlvbnNQZXJtaXNpb25SZXF1ZXN0KCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIE5vdGlmaWNhdGlvbi5yZXF1ZXN0UGVybWlzc2lvbigpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzMi5nZXRNZXNzYWdpbmdUb2tlbigpOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1VuYWJsZSB0byBnZXQgcGVybWlzc2lvbiB0byBub3RpZnkuJywgZXJyKTsKICAgICAgfSk7CiAgICB9LAogICAgc2F2ZVRva2VuOiBmdW5jdGlvbiBzYXZlVG9rZW4odG9rZW4pIHsKICAgICAgY29uc29sZS5sb2coJ3Rva2VucycsIHRva2VuKTsKCiAgICAgIHZhciBuZXdVc2VyID0gX29iamVjdFNwcmVhZCh7fSwgdGhpcy51c2VyRGF0YUZvckNoZWNraW5nKTsKCiAgICAgIG5ld1VzZXIuZmlyZWJhc2VUb2tlbiA9IHRva2VuOwogICAgICB0aGlzLnVwZGF0ZVVzZXJGaXJlYmFzZVRva2VuKHRva2VuKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbWVzc2FnaW5nVG9rZW4nLCB0b2tlbik7CiAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCdtZXNzYWdpbmdUb2tlbicsIHRva2VuKTsKICAgICAgICBjb25zb2xlLmxvZyhlcnIpOwogICAgICB9KTsKICAgIH0sCiAgICBsaXN0ZW5Ub2tlblJlZnJlc2g6IGZ1bmN0aW9uIGxpc3RlblRva2VuUmVmcmVzaCgpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB2YXIgY3VycmVudE1lc3NhZ2VUb2tlbiA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbWVzc2FnaW5nVG9rZW4nKTsKICAgICAgY29uc29sZS5sb2coJ2N1cnJlbnRNZXNzYWdlVG9rZW4nLCBjdXJyZW50TWVzc2FnZVRva2VuKTsKCiAgICAgIGlmICghY3VycmVudE1lc3NhZ2VUb2tlbikgewogICAgICAgIG1lc3NhZ2luZy5vblRva2VuUmVmcmVzaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICBtZXNzYWdpbmcuZ2V0VG9rZW4oKS50aGVuKGZ1bmN0aW9uICh0b2tlbikgewogICAgICAgICAgICBfdGhpczMuc2F2ZVRva2VuKHRva2VuKTsKICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ1VuYWJsZSB0byByZXRyaWV2ZSByZWZyZXNoZWQgdG9rZW4gJywgZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9CiAgICB9LAogICAgZG9HZXRNZXNzYWdpbmdUb2tlbjogZnVuY3Rpb24gZG9HZXRNZXNzYWdpbmdUb2tlbigpIHsKICAgICAgaWYgKCF0aGlzLnVzZXJEYXRhRm9yQ2hlY2tpbmcpIHsKICAgICAgICBjb25zb2xlLmxvZygndXNlciBkYXRhIGlzIG51bGwuIGNhbm5vdCBnZXQgYW5kIHNhdmUgZmlyZWJhc2UgZmNtIHRva2VuLicpOwogICAgICB9CgogICAgICBpZiAobWVzc2FnaW5nICYmIHRoaXMudXNlckRhdGFGb3JDaGVja2luZykgewogICAgICAgIHRoaXMuZ2V0TWVzc2FnaW5nVG9rZW4oKTsKICAgICAgfQogICAgfQogIH0pLAogIGNvbXB1dGVkOiBfb2JqZWN0U3ByZWFkKHt9LCBtYXBTdGF0ZSh7CiAgICB1c2VyRGF0YUZvckNoZWNraW5nOiBmdW5jdGlvbiB1c2VyRGF0YUZvckNoZWNraW5nKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS51c2VyLnVzZXIuZGF0YTsKICAgIH0KICB9KSkKfTsKZXhwb3J0IGRlZmF1bHQgcHVzaE5vdGlmaWNhdGlvbk1peGluczs="},{"version":3,"sources":["D:/capstone/DrowsinessFrontEnd/src/components/mixins/pushNotification.js"],"names":["mapState","mapActions","firebase","constant","messaging","pushNotificationMixins","data","methods","updateUser","updateUserFirebaseToken","getUser","getMessagingToken","getToken","vapidKey","PUBLIC_VAPID_KEY","then","token","currentMessageToken","userDataForChecking","firebaseToken","console","log","saveToken","notificationsPermisionRequest","catch","err","Notification","requestPermission","newUser","response","window","localStorage","setItem","listenTokenRefresh","getItem","onTokenRefresh","doGetMessagingToken","computed","state","user"],"mappings":"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","sourcesContent":["import { mapState, mapActions } from 'vuex';\n\nimport firebase from '../../config/firebase';\nimport constant from '../../config/constant';\n\nconst { messaging } = firebase;\n\nconst pushNotificationMixins = {\n  data: () => ({}),\n  methods: {\n    ...mapActions({\n      updateUser: 'user/updateUser',\n      updateUserFirebaseToken: 'user/updateUserFirebaseToken',\n      getUser: 'user/getUser',\n    }),\n    getMessagingToken() {\n      messaging\n        .getToken({ vapidKey: constant.PUBLIC_VAPID_KEY })\n        .then(async (token) => {\n          if (token) {\n            // const currentMessageToken = window.localStorage.getItem('messagingToken');\n            const currentMessageToken = this.userDataForChecking.firebaseToken;\n            console.log('token will be updated', currentMessageToken !== token);\n            if (currentMessageToken !== token) {\n              await this.saveToken(token);\n            }\n          } else {\n            console.log('No Instance ID token available. Request permission to generate one.');\n            this.notificationsPermisionRequest();\n          }\n        })\n        .catch((err) => {\n          console.log('An error occurred while retrieving token. ', err);\n        });\n    },\n    notificationsPermisionRequest() {\n      Notification.requestPermission()\n        .then(() => {\n          this.getMessagingToken();\n        })\n        .catch((err) => {\n          console.log('Unable to get permission to notify.', err);\n        });\n    },\n    saveToken(token) {\n      console.log('tokens', token);\n      const newUser = { ...this.userDataForChecking };\n      newUser.firebaseToken = token;\n      this.updateUserFirebaseToken(token)\n        .then((response) => {\n          window.localStorage.setItem('messagingToken', token);\n          console.log(response);\n        })\n        .catch((err) => {\n          window.localStorage.setItem('messagingToken', token);\n          console.log(err);\n        });\n    },\n    listenTokenRefresh() {\n      const currentMessageToken = window.localStorage.getItem('messagingToken');\n      console.log('currentMessageToken', currentMessageToken);\n      if (!currentMessageToken) {\n        messaging.onTokenRefresh(() => {\n          messaging\n            .getToken()\n            .then((token) => {\n              this.saveToken(token);\n            })\n            .catch((err) => {\n              console.log('Unable to retrieve refreshed token ', err);\n            });\n        });\n      }\n    },\n    doGetMessagingToken() {\n      if (!this.userDataForChecking) {\n        console.log('user data is null. cannot get and save firebase fcm token.');\n      }\n      if (messaging && this.userDataForChecking) {\n        this.getMessagingToken();\n      }\n    },\n  },\n  computed: {\n    ...mapState({\n      userDataForChecking: (state) => state.user.user.data,\n    }),\n  },\n};\n\nexport default pushNotificationMixins;\n"]}]}