{"remainingRequest":"D:\\capstone\\DrowsinessFrontEnd\\node_modules\\thread-loader\\dist\\cjs.js!D:\\capstone\\DrowsinessFrontEnd\\node_modules\\babel-loader\\lib\\index.js!D:\\capstone\\DrowsinessFrontEnd\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\capstone\\DrowsinessFrontEnd\\src\\store\\modules\\vendor\\groups.js","dependencies":[{"path":"D:\\capstone\\DrowsinessFrontEnd\\src\\store\\modules\\vendor\\groups.js","mtime":1624897349286},{"path":"D:\\capstone\\DrowsinessFrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\capstone\\DrowsinessFrontEnd\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\capstone\\DrowsinessFrontEnd\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\capstone\\DrowsinessFrontEnd\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/capstone/DrowsinessFrontEnd/src/store/modules/vendor/groups.js"],"names":["myState","groups","data","isLoading","success","error","types","rooms","myGetters","findGroupById","state","id","result","filter","group","groupId","length","findTypesById","type","typeId","mutationTypes","GET_GROUPS_REQUEST","GET_GROUPS_SUCCESS","GET_GROUPS_FAILURE","GET_TYPES_REQUEST","GET_TYPES_SUCCESS","GET_TYPES_FAILURE","GET_ROOMS_REQUEST","GET_ROOMS_SUCCESS","GET_ROOMS_FAILURE","mutations","actions","getGroups","commit","userId","window","$cookies","get","role","axios","res","Error","getTypes","getters","console","log","groupIds","map","Promise","all","getRooms","typeIds","namespaced"],"mappings":"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","sourcesContent":["const myState = () => ({\n  groups: {\n    data: [],\n    isLoading: false,\n    success: null,\n    error: null,\n  },\n  types: {\n    data: [],\n    isLoading: false,\n    success: null,\n    error: null,\n  },\n  rooms: {\n    data: [],\n    isLoading: false,\n    success: null,\n    error: null,\n  },\n});\n\nconst myGetters = {\n  findGroupById: (state) => (id) => {\n    const result = state.groups.data.filter((group) => group.groupId === id);\n    if (result.length > 0) {\n      return result[0];\n    }\n    return null;\n  },\n  findTypesById: (state) => (id) => {\n    const result = state.types.data.filter((type) => type.typeId === id);\n    if (result.length > 0) {\n      return result[0];\n    }\n    return null;\n  },\n};\nconst mutationTypes = {\n  GET_GROUPS_REQUEST: 'GET_GROUPS_REQUEST',\n  GET_GROUPS_SUCCESS: 'GET_GROUPS_SUCCESS',\n  GET_GROUPS_FAILURE: 'GET_GROUPS_FAILURE',\n  GET_TYPES_REQUEST: 'GET_TYPES_REQUEST',\n  GET_TYPES_SUCCESS: 'GET_TYPES_SUCCESS',\n  GET_TYPES_FAILURE: 'GET_TYPES_FAILURE',\n  GET_ROOMS_REQUEST: 'GET_ROOMS_REQUEST',\n  GET_ROOMS_SUCCESS: 'GET_ROOMS_SUCCESS',\n  GET_ROOMS_FAILURE: 'GET_ROOMS_FAILURE',\n};\nconst mutations = {\n  GET_GROUPS_REQUEST(state) {\n    state.groups.isLoading = true;\n  },\n  GET_TYPES_REQUEST(state) {\n    state.types.isLoading = true;\n  },\n  GET_ROOMS_REQUEST(state) {\n    state.rooms.isLoading = true;\n  },\n  GET_GROUPS_SUCCESS(state, groups) {\n    state.groups.data = groups;\n    state.groups.isLoading = false;\n    state.groups.success = true;\n  },\n  GET_TYPES_SUCCESS(state, types) {\n    state.types.data = types;\n    state.types.isLoading = false;\n    state.types.success = true;\n  },\n  GET_ROOMS_SUCCESS(state, rooms) {\n    state.rooms.data = rooms;\n    state.rooms.isLoading = false;\n    state.rooms.success = true;\n  },\n  GET_GROUPS_FAILURE(state, error) {\n    state.groups.isLoading = false;\n    state.groups.success = false;\n    state.groups.error = error;\n  },\n  GET_TYPES_FAILURE(state, error) {\n    state.types.isLoading = false;\n    state.types.success = false;\n    state.types.error = error;\n  },\n  GET_ROOMS_FAILURE(state, error) {\n    state.rooms.isLoading = false;\n    state.rooms.success = false;\n    state.types.error = error;\n  },\n};\n\nconst actions = {\n  async getGroups({ commit }) {\n    const userId = window.$cookies.get('userId');\n    const role = window.$cookies.get('role');\n    if (userId && role === 'vendors') {\n      commit(mutationTypes.GET_GROUPS_REQUEST);\n      try {\n        const res = await window.axios.get(`/api/v1/vendors/${userId}/groups`);\n        // commit(mutationTypes.GET_GROUPS_SUCCESS, res.data.data);\n        commit(mutationTypes.GET_GROUPS_SUCCESS, res.data.data);\n      } catch (error) {\n        commit(mutationTypes.GET_GROUPS_FAILURE, error);\n      }\n    } else {\n      throw new Error('cookies userId and role are null');\n    }\n  },\n  async getTypes({ commit, state, getters }) {\n    const userId = window.$cookies.get('userId');\n    const role = window.$cookies.get('role');\n    console.log(state.groups);\n    if (userId && role === 'vendors' && state.groups.data) {\n      commit(mutationTypes.GET_TYPES_REQUEST);\n      try {\n        const groupIds = state.groups.data.map((group) => group.groupId);\n        console.log(groupIds);\n        let types = [];\n        await Promise.all(groupIds.map(async (groupId) => {\n          const res = await window.axios.get(`/api/v1/groups/${groupId}/types`);\n          types = [...types, ...res.data.data];\n          const group = getters.findGroupById(groupId);\n          group.types = res.data.data;\n        }));\n        commit(mutationTypes.GET_TYPES_SUCCESS, types);\n      } catch (error) {\n        console.log(error);\n        commit(mutationTypes.GET_TYPES_FAILURE, error);\n      }\n    } else {\n      throw new Error('cookies userId and role are null');\n    }\n  },\n  async getRooms({ commit, state, getters }) {\n    const userId = window.$cookies.get('userId');\n    const role = window.$cookies.get('role');\n    if (userId && role === 'vendors' && state.types.data) {\n      commit(mutationTypes.GET_ROOMS_REQUEST);\n      try {\n        const typeIds = state.types.data.map((type) => type.typeId);\n        let rooms = [];\n        await Promise.all(typeIds.map(async (typeId) => {\n          const res = await window.axios.get(`/api/v1/types/${typeId}/rooms`);\n          rooms = [...rooms, ...res.data.data];\n          const type = getters.findTypesById(typeId);\n          type.rooms = res.data.data;\n        }));\n        commit(mutationTypes.GET_ROOMS_SUCCESS, rooms);\n      } catch (error) {\n        console.log(error);\n        commit(mutationTypes.GET_ROOMS_FAILURE, error);\n      }\n    } else {\n      throw new Error('cookies userId and role are null');\n    }\n  },\n};\n\nexport default {\n  namespaced: true,\n  state: myState,\n  mutations,\n  getters: myGetters,\n  actions,\n};\n"]}]}